package com.example.livekick.notification

import android.content.Context
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.livekick.data.repository.MatchRepositoryImpl
import com.example.livekick.domain.model.MatchStatus
import com.example.livekick.domain.usecase.GetLiveMatchesUseCase
import kotlinx.coroutines.delay
import java.time.LocalDateTime
import java.time.temporal.ChronoUnit

class MatchNotificationWorker(
    context: Context,
    params: WorkerParameters
) : CoroutineWorker(context, params) {
    
    private val matchRepository = MatchRepositoryImpl(context)
    private val getLiveMatchesUseCase = GetLiveMatchesUseCase(matchRepository)
    private val notificationManager = LiveKickNotificationManager(context)
    
    override suspend fun doWork(): Result {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏
            val matches = getLiveMatchesUseCase()
            
            matches.collect { matchList ->
                val now = LocalDateTime.now()
                
                matchList.forEach { match ->
                    when (match.status) {
                        MatchStatus.SCHEDULED -> {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç
                            val timeUntilMatch = ChronoUnit.MINUTES.between(now, match.dateTime)
                            if (timeUntilMatch in 0..5) {
                                notificationManager.showMatchStartNotification(match)
                            }
                        }
                        
                        MatchStatus.LIVE -> {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∂–∏–≤—ã—Ö –º–∞—Ç—á–∞—Ö
                            checkImportantEvents(match)
                        }
                        
                        else -> {
                            // –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            notificationManager.cancelMatchNotifications(match.id)
                        }
                    }
                }
            }
            
            return Result.success()
        } catch (e: Exception) {
            android.util.Log.e("LiveKick", "–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${e.message}", e)
            return Result.retry()
        }
    }
    
    private suspend fun checkImportantEvents(match: com.example.livekick.domain.model.Match) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞
        match.events.forEach { event ->
            when (event.type) {
                com.example.livekick.domain.model.EventType.GOAL -> {
                    notificationManager.showMatchEventNotification(
                        match,
                        "‚öΩ –ì–û–õ! ${event.player ?: "–ò–≥—Ä–æ–∫"} –∑–∞–±–∏–ª –≥–æ–ª!"
                    )
                }
                com.example.livekick.domain.model.EventType.RED_CARD -> {
                    notificationManager.showMatchEventNotification(
                        match,
                        "üü• –ö–†–ê–°–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê! ${event.player ?: "–ò–≥—Ä–æ–∫"} —É–¥–∞–ª–µ–Ω!"
                    )
                }
                com.example.livekick.domain.model.EventType.YELLOW_CARD -> {
                    // –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã, –º–æ–∂–Ω–æ –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å
                }
                else -> {
                    // –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è
                }
            }
        }
    }
} 